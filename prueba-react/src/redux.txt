Redux: Es una librerìa para manejar el estado de una aplicación - No tiene nada que ver con 

react-redux: Es una librería que integra redux con react

npm i --save redux react-redux

'----------------------------------------------------------------'

Redux -> el store son múltiples modificaciones
    -> Provider: 
- Reducer: Función pura. No necesita import. Me describe todos los cambios 
posibles que tengo en mi aplicación. 
        ---> Contiene un switch(). 


src/
    |_ui
    |_api
        |_store.js
        |_reducer.js
        |_actions /
            |_Formulario.js
        |_reducers/
            |_Formulario.js


Implementación de Redux
1 - Crear un store con createStore
2 - Meter toda la aplicación dentro de un <Provider>
3 - Pasarle el store al provider por prop.
4 - Crear un reducer como una funciíon pura que toma un estado anterior o inicial y un action, que puede ser 
cualquier cosa.
5 - Completar el reducer con todos los cambios posibles de la aplicación
6 - Pasar el reducer con parámetro al store
(*Nota: podemos activar la consola de redux)

Nota: el componente Provider asegtura que cualquier componente hijo de la aplicación

Implementación Redux 2 
1 - Pasar el state 'links' del componente App al store de redux
2 - Conectar el componente Header para poder consumir el array de links desde el redux y no desde el state
de app
3 - Pasar el <button> que modifica el state 'mostrar' del componente App adentro del componente _Formulari
4 - Pasar el state 'mostrar', 'usuario' y 'usuarios' de App al store del redux
5 - Conectar el componente Formulario para que consuma las propiedades del punto anterior desde redux
6 - Implementar actions tales como los metodos que teniamos en app
7 - Contectar los metodos de la función dispatch dentro de Formulario para que vuelva a funcionar 
el submit y el charge